import pandas as pd
import numpy as np
import os
import webbrowser
from scipy.optimize import fmin_cg




### Target Matrix Aggregation

d1 = pd.read_csv('/Users/apple/Desktop/DataSets/CSE847Project/Rating_data/rating1.csv')
df1 = pd.DataFrame(data = np.array(d1), columns = ['user_id', 'rate_score', 'movie_id'], index=None, dtype=None, copy=False)

d2 = pd.read_csv('/Users/apple/Desktop/DataSets/CSE847Project/Rating_data/rating2.csv')
df2 = pd.DataFrame(data = np.array(d2), columns = ['user_id', 'rate_score', 'movie_id'], index=None, dtype=None, copy=False)

d3 = pd.read_csv('/Users/apple/Desktop/DataSets/CSE847Project/Rating_data/rating3.csv')
df3 = pd.DataFrame(data = np.array(d3), columns = ['user_id', 'rate_score', 'movie_id'], index=None, dtype=None, copy=False)

d4 = pd.read_csv('/Users/apple/Desktop/DataSets/CSE847Project/Rating_data/rating4.csv')
df4 = pd.DataFrame(data = np.array(d4), columns = ['user_id', 'rate_score', 'movie_id'], index=None, dtype=None, copy=False)

df1_sample = df1.sample(n=1000)
df2_sample = df2.sample(n=1000)
df3_sample = df3.sample(n=1000)
df4_sample = df4.sample(n=1000)

df = np.vstack((df1_sample, df2_sample, df3_sample, df4_sample))
df = pd.DataFrame(data = np.array(df), columns = ['user', 'rating', 'movie'], index=None, dtype=None, copy=False)




### Sparse Matrix Establishment

from scipy.sparse import csr_matrix

user_u = list(sorted(df.user.unique()))
movie_u = list(sorted(df.movie.unique()))

row = df.user.astype('category', categories=user_u).cat.codes
col = df.movie.astype('category', categories=movie_u).cat.codes

data = df['rating'].tolist()

sparse_matrix = csr_matrix((data, (row, col)), shape=(len(user_u), len(movie_u)))

ratings_df = pd.SparseDataFrame([ pd.SparseSeries(sparse_matrix[i].toarray().ravel(), fill_value=0)
                         for i in np.arange(sparse_matrix.shape[0]) ],
                        index=user_u, columns=movie_u, default_fill_value=0)
                        
### Sparse Matrix Establishment (Visualization)

ratings_df.head(5000)

html = ratings_df.to_html(na_rep="")

with open("review_matrix.html", "w") as f:
    f.write(html)

full_filename = os.path.abspath("review_matrix.html")
webbrowser.open("file://{}".format(full_filename))





### Matrix Completion Using Matrix Factorization

def normalize_ratings(ratings):
    """
    Given an array of user ratings, subtract the mean of each product's ratings
    :param ratings: 2d array of user ratings
    :return: (normalized ratings array, the calculated means)
    """
    mean_ratings = np.nanmean(ratings, axis=0)
    return ratings - mean_ratings, mean_ratings


def cost(X, *args):
    """
    Cost function for low rank matrix factorization
    :param X: The matrices being factored (P and Q) rolled up as a contiguous array
    :param args: Array containing (num_users, num_products, num_features, ratings, mask, regularization_amount)
    :return: The cost with the current P and Q matrices
    """
    num_users, num_products, num_features, ratings, mask, regularization_amount = args

    # Unroll P and Q
    P = X[0:(num_users * num_features)].reshape(num_users, num_features)
    Q = X[(num_users * num_features):].reshape(num_products, num_features)
    Q = Q.T

    # Calculate current cost
    return (np.sum(np.square(mask * (np.dot(P, Q) - ratings))) / 2) + ((regularization_amount / 2.0) * np.sum(np.square(Q.T))) + ((regularization_amount / 2.0) * np.sum(np.square(P)))


def gradient(X, *args):
    """
    Calculate the cost gradients with the current P and Q.
    :param X: The matrices being factored (P and Q) rolled up as a contiguous array
    :param args: Array containing (num_users, num_products, num_features, ratings, mask, regularization_amount)
    :return: The gradient with the current X
    """
    num_users, num_products, num_features, ratings, mask, regularization_amount = args

    # Unroll P and Q
    P = X[0:(num_users * num_features)].reshape(num_users, num_features)
    Q = X[(num_users * num_features):].reshape(num_products, num_features)
    Q = Q.T

    # Calculate the current gradients for both P and Q
    P_grad = np.dot((mask * (np.dot(P, Q) - ratings)), Q.T) + (regularization_amount * P)
    Q_grad = np.dot((mask * (np.dot(P, Q) - ratings)).T, P) + (regularization_amount * Q.T)

    # Return the gradients as one rolled-up array as expected by fmin_cg
    return np.append(P_grad.ravel(), Q_grad.ravel())


def low_rank_matrix_factorization(ratings, mask=None, num_features=15, regularization_amount=0.01):
    """
    Factor a ratings array into two latent feature arrays (user features and product features)

    :param ratings: Matrix with user ratings to factor
    :param mask: A binary mask of which ratings are present in the ratings array to factor
    :param num_features: Number of latent features to generate for users and products
    :param regularization_amount: How much regularization to apply
    :return: (P, Q) - the factored latent feature arrays
    """
    num_users, num_products = ratings.shape

    # If no mask is provided, consider all 'NaN' elements as missing and create a mask.
    if mask is None:
        mask = np.invert(np.isnan(ratings))

    # Replace NaN values with zero
    ratings = np.nan_to_num(ratings)

    # Create P and Q and fill with random numbers to start
    np.random.seed(0)
    P = np.random.randn(num_users, num_features)
    Q = np.random.randn(num_products, num_features)

    # Roll up P and Q into a contiguous array as fmin_cg expects
    initial = np.append(P.ravel(), Q.ravel())

    # Create an args array as fmin_cg expects
    args = (num_users, num_products, num_features, ratings, mask, regularization_amount)

    # Call fmin_cg to minimize the cost function and this find the best values for P and Q
    X = fmin_cg(cost, initial, fprime=gradient, args=args, maxiter=3000)

    # Unroll the new P and new Q arrays out of the contiguous array returned by fmin_cg
    nP = X[0:(num_users * num_features)].reshape(num_users, num_features)
    nQ = X[(num_users * num_features):].reshape(num_products, num_features)

    return nP, nQ.T


def RMSE(real, predicted):
    """
    Calculate the root mean squared error between a matrix of real ratings and predicted ratings
    :param real: A matrix containing the real ratings (with 'NaN' for any missing elements)
    :param predicted: A matrix of predictions
    :return: The RMSE as a float
    """
    return np.sqrt(np.nanmean(np.square(real - predicted)))
    
U, M = low_rank_matrix_factorization(ratings_df.as_matrix(), num_features=15, regularization_amount=0.1)
    
predicted_ratings = np.matmul(U, M)
    
predicted_ratings_df = pd.DataFrame(index=ratings_df.index, columns=ratings_df.columns, data=predicted_ratings)
predicted_ratings_df.to_csv("predicted_ratings.csv")
    
predicted_ratings_df.head()
